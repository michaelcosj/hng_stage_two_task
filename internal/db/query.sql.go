// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const findUserInOrgs = `-- name: FindUserInOrgs :one
SELECT u.id, u.email, u.first_name, u.last_name, u.password, u.phone FROM users auth_user
JOIN user_organisations u_org ON u_org.user_id = auth_user.id
JOIN organisations org ON u_org.org_id = org.id
JOIN user_organisations org_users ON org_users.org_id = org.id
JOIN users u ON u.id = $1 AND u.id = org_users.user_id
WHERE auth_user.id = $2
`

type FindUserInOrgsParams struct {
	FindUser uuid.UUID
	AuthUser uuid.UUID
}

// pretty complicated query but should work
// gets a user if it belongs to one of another user's
// organisation
func (q *Queries) FindUserInOrgs(ctx context.Context, arg FindUserInOrgsParams) (User, error) {
	row := q.db.QueryRow(ctx, findUserInOrgs, arg.FindUser, arg.AuthUser)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.Phone,
	)
	return i, err
}

const orgAllWhereUser = `-- name: OrgAllWhereUser :many
SELECT org.id, org.name, org.description FROM user_organisations uo
JOIN organisations org ON uo.org_id = org.id
WHERE uo.user_id = $1
`

func (q *Queries) OrgAllWhereUser(ctx context.Context, userID uuid.UUID) ([]Organisation, error) {
	rows, err := q.db.Query(ctx, orgAllWhereUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organisation
	for rows.Next() {
		var i Organisation
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const orgInsert = `-- name: OrgInsert :one
INSERT INTO organisations (
    name, description
) VALUES ( $1, $2 )
RETURNING id, name, description
`

type OrgInsertParams struct {
	Name        string
	Description pgtype.Text
}

func (q *Queries) OrgInsert(ctx context.Context, arg OrgInsertParams) (Organisation, error) {
	row := q.db.QueryRow(ctx, orgInsert, arg.Name, arg.Description)
	var i Organisation
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const orgWhereUser = `-- name: OrgWhereUser :one
SELECT org.id, org.name, org.description FROM user_organisations uo
JOIN organisations org ON uo.org_id = org.id
WHERE uo.user_id = $1 and uo.org_id = $2 limit 1
`

type OrgWhereUserParams struct {
	UserID uuid.UUID
	OrgID  uuid.UUID
}

func (q *Queries) OrgWhereUser(ctx context.Context, arg OrgWhereUserParams) (Organisation, error) {
	row := q.db.QueryRow(ctx, orgWhereUser, arg.UserID, arg.OrgID)
	var i Organisation
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const organisationWhereId = `-- name: OrganisationWhereId :one
SELECT id, name, description FROM organisations
WHERE id = $1 LIMIT 1
`

func (q *Queries) OrganisationWhereId(ctx context.Context, id uuid.UUID) (Organisation, error) {
	row := q.db.QueryRow(ctx, organisationWhereId, id)
	var i Organisation
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const userAddOrg = `-- name: UserAddOrg :exec
INSERT INTO user_organisations (
    user_id, org_id
) VALUES ( $1, $2 )
`

type UserAddOrgParams struct {
	UserID uuid.UUID
	OrgID  uuid.UUID
}

func (q *Queries) UserAddOrg(ctx context.Context, arg UserAddOrgParams) error {
	_, err := q.db.Exec(ctx, userAddOrg, arg.UserID, arg.OrgID)
	return err
}

const userInsert = `-- name: UserInsert :one
INSERT INTO users (
    email, first_name, last_name, password, phone
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, email, first_name, last_name, password, phone
`

type UserInsertParams struct {
	Email     string
	FirstName string
	LastName  string
	Password  string
	Phone     pgtype.Text
}

func (q *Queries) UserInsert(ctx context.Context, arg UserInsertParams) (User, error) {
	row := q.db.QueryRow(ctx, userInsert,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.Password,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.Phone,
	)
	return i, err
}

const userWhereEmail = `-- name: UserWhereEmail :one
SELECT id, email, first_name, last_name, password, phone FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) UserWhereEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, userWhereEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.Phone,
	)
	return i, err
}

const userWhereId = `-- name: UserWhereId :one
SELECT id, email, first_name, last_name, password, phone FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) UserWhereId(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, userWhereId, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.Phone,
	)
	return i, err
}
